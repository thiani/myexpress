{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Thiani\\\\myexpress\\\\myexpresslimited\\\\src\\\\context\\\\PaymentContext.tsx\",\n  _s = $RefreshSig$();\n// src/context/PaymentContext.tsx\nimport React, { createContext, useState, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialPaymentState = {\n  status: 'idle',\n  error: null,\n  checkoutRequestId: null\n};\nexport const PaymentContext = /*#__PURE__*/createContext(undefined);\nexport const PaymentProvider = ({\n  children\n}) => {\n  _s();\n  const [paymentState, setPaymentState] = useState(initialPaymentState);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const initiatePayment = useCallback(async payment => {\n    setIsProcessing(true);\n    setPaymentState({\n      ...initialPaymentState,\n      status: 'processing'\n    });\n    try {\n      // Mock API call - replace with your actual API endpoint\n      const response = await new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            MerchantRequestID: \"12345\",\n            CheckoutRequestID: \"67890\",\n            ResponseCode: \"0\",\n            ResponseDescription: \"Success\",\n            CustomerMessage: \"Success\"\n          });\n        }, 2000);\n      });\n      if (response.ResponseCode === \"0\") {\n        setPaymentState({\n          status: 'processing',\n          error: null,\n          checkoutRequestId: response.CheckoutRequestID\n        });\n        return response;\n      } else {\n        throw new Error(response.ResponseDescription);\n      }\n    } catch (error) {\n      setPaymentState({\n        status: 'error',\n        error: error instanceof Error ? error.message : 'Payment failed',\n        checkoutRequestId: null\n      });\n      throw error;\n    } finally {\n      setIsProcessing(false);\n    }\n  }, []);\n  const verifyPayment = useCallback(async checkoutRequestId => {\n    try {\n      // Mock verification - replace with actual API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      setPaymentState({\n        status: 'success',\n        error: null,\n        checkoutRequestId\n      });\n      return true;\n    } catch (error) {\n      setPaymentState({\n        status: 'error',\n        error: 'Payment verification failed',\n        checkoutRequestId\n      });\n      return false;\n    }\n  }, []);\n  const resetPayment = useCallback(() => {\n    setPaymentState(initialPaymentState);\n    setIsProcessing(false);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(PaymentContext.Provider, {\n    value: {\n      initiatePayment,\n      verifyPayment,\n      isProcessing,\n      error: paymentState.error,\n      paymentState,\n      resetPayment\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(PaymentProvider, \"f3KpoJcRtrWVIvlGze4i+v4t2N8=\");\n_c = PaymentProvider;\nexport default PaymentContext;\nvar _c;\n$RefreshReg$(_c, \"PaymentProvider\");","map":{"version":3,"names":["React","createContext","useState","useCallback","jsxDEV","_jsxDEV","initialPaymentState","status","error","checkoutRequestId","PaymentContext","undefined","PaymentProvider","children","_s","paymentState","setPaymentState","isProcessing","setIsProcessing","initiatePayment","payment","response","Promise","resolve","setTimeout","MerchantRequestID","CheckoutRequestID","ResponseCode","ResponseDescription","CustomerMessage","Error","message","verifyPayment","resetPayment","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Thiani/myexpress/myexpresslimited/src/context/PaymentContext.tsx"],"sourcesContent":["// src/context/PaymentContext.tsx\r\nimport React, { createContext, useState, useCallback } from 'react';\r\nimport type { \r\n  PaymentContextType,\r\n  PaymentState, \r\n  MpesaPayment, \r\n  MpesaResponse \r\n} from '../types/payment';\r\n\r\nconst initialPaymentState: PaymentState = {\r\n  status: 'idle',\r\n  error: null,\r\n  checkoutRequestId: null\r\n};\r\n\r\nexport const PaymentContext = createContext<PaymentContextType | undefined>(undefined);\r\n\r\nexport const PaymentProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [paymentState, setPaymentState] = useState<PaymentState>(initialPaymentState);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n  const initiatePayment = useCallback(async (payment: MpesaPayment): Promise<MpesaResponse> => {\r\n    setIsProcessing(true);\r\n    setPaymentState({ ...initialPaymentState, status: 'processing' });\r\n\r\n    try {\r\n      // Mock API call - replace with your actual API endpoint\r\n      const response = await new Promise<MpesaResponse>((resolve) => {\r\n        setTimeout(() => {\r\n          resolve({\r\n            MerchantRequestID: \"12345\",\r\n            CheckoutRequestID: \"67890\",\r\n            ResponseCode: \"0\",\r\n            ResponseDescription: \"Success\",\r\n            CustomerMessage: \"Success\"\r\n          });\r\n        }, 2000);\r\n      });\r\n\r\n      if (response.ResponseCode === \"0\") {\r\n        setPaymentState({\r\n          status: 'processing',\r\n          error: null,\r\n          checkoutRequestId: response.CheckoutRequestID\r\n        });\r\n        return response;\r\n      } else {\r\n        throw new Error(response.ResponseDescription);\r\n      }\r\n    } catch (error) {\r\n      setPaymentState({\r\n        status: 'error',\r\n        error: error instanceof Error ? error.message : 'Payment failed',\r\n        checkoutRequestId: null\r\n      });\r\n      throw error;\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  }, []);\r\n\r\n  const verifyPayment = useCallback(async (checkoutRequestId: string): Promise<boolean> => {\r\n    try {\r\n      // Mock verification - replace with actual API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      setPaymentState({\r\n        status: 'success',\r\n        error: null,\r\n        checkoutRequestId\r\n      });\r\n      return true;\r\n    } catch (error) {\r\n      setPaymentState({\r\n        status: 'error',\r\n        error: 'Payment verification failed',\r\n        checkoutRequestId\r\n      });\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  const resetPayment = useCallback(() => {\r\n    setPaymentState(initialPaymentState);\r\n    setIsProcessing(false);\r\n  }, []);\r\n\r\n  return (\r\n    <PaymentContext.Provider value={{\r\n      initiatePayment,\r\n      verifyPayment,\r\n      isProcessing,\r\n      error: paymentState.error,\r\n      paymentState,\r\n      resetPayment\r\n    }}>\r\n      {children}\r\n    </PaymentContext.Provider>\r\n  );\r\n};\r\n\r\nexport default PaymentContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}