{"ast":null,"code":"import _objectSpread from\"C:/Users/Thiani/myexpress/myexpresslimited/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// src/context/PaymentContext.tsx\nimport React,{createContext,useState,useCallback}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const initialPaymentState={status:'idle',error:null,checkoutRequestId:null};export const PaymentContext=/*#__PURE__*/createContext(undefined);export const PaymentProvider=_ref=>{let{children}=_ref;const[paymentState,setPaymentState]=useState(initialPaymentState);const[isProcessing,setIsProcessing]=useState(false);const initiatePayment=useCallback(async payment=>{setIsProcessing(true);setPaymentState(_objectSpread(_objectSpread({},initialPaymentState),{},{status:'processing'}));try{// Mock API call - replace with your actual API endpoint\nconst response=await new Promise(resolve=>{setTimeout(()=>{resolve({MerchantRequestID:\"12345\",CheckoutRequestID:\"67890\",ResponseCode:\"0\",ResponseDescription:\"Success\",CustomerMessage:\"Success\"});},2000);});if(response.ResponseCode===\"0\"){setPaymentState({status:'processing',error:null,checkoutRequestId:response.CheckoutRequestID});return response;}else{throw new Error(response.ResponseDescription);}}catch(error){setPaymentState({status:'error',error:error instanceof Error?error.message:'Payment failed',checkoutRequestId:null});throw error;}finally{setIsProcessing(false);}},[]);const verifyPayment=useCallback(async checkoutRequestId=>{try{// Mock verification - replace with actual API call\nawait new Promise(resolve=>setTimeout(resolve,1000));setPaymentState({status:'success',error:null,checkoutRequestId});return true;}catch(error){setPaymentState({status:'error',error:'Payment verification failed',checkoutRequestId});return false;}},[]);const resetPayment=useCallback(()=>{setPaymentState(initialPaymentState);setIsProcessing(false);},[]);return/*#__PURE__*/_jsx(PaymentContext.Provider,{value:{initiatePayment,verifyPayment,isProcessing,error:paymentState.error,paymentState,resetPayment},children:children});};export default PaymentContext;","map":{"version":3,"names":["React","createContext","useState","useCallback","jsx","_jsx","initialPaymentState","status","error","checkoutRequestId","PaymentContext","undefined","PaymentProvider","_ref","children","paymentState","setPaymentState","isProcessing","setIsProcessing","initiatePayment","payment","_objectSpread","response","Promise","resolve","setTimeout","MerchantRequestID","CheckoutRequestID","ResponseCode","ResponseDescription","CustomerMessage","Error","message","verifyPayment","resetPayment","Provider","value"],"sources":["C:/Users/Thiani/myexpress/myexpresslimited/src/context/PaymentContext.tsx"],"sourcesContent":["// src/context/PaymentContext.tsx\r\nimport React, { createContext, useState, useCallback } from 'react';\r\nimport type { \r\n  PaymentContextType,\r\n  PaymentState, \r\n  MpesaPayment, \r\n  MpesaResponse \r\n} from '../types/payment';\r\n\r\nconst initialPaymentState: PaymentState = {\r\n  status: 'idle',\r\n  error: null,\r\n  checkoutRequestId: null\r\n};\r\n\r\nexport const PaymentContext = createContext<PaymentContextType | undefined>(undefined);\r\n\r\nexport const PaymentProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [paymentState, setPaymentState] = useState<PaymentState>(initialPaymentState);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n  const initiatePayment = useCallback(async (payment: MpesaPayment): Promise<MpesaResponse> => {\r\n    setIsProcessing(true);\r\n    setPaymentState({ ...initialPaymentState, status: 'processing' });\r\n\r\n    try {\r\n      // Mock API call - replace with your actual API endpoint\r\n      const response = await new Promise<MpesaResponse>((resolve) => {\r\n        setTimeout(() => {\r\n          resolve({\r\n            MerchantRequestID: \"12345\",\r\n            CheckoutRequestID: \"67890\",\r\n            ResponseCode: \"0\",\r\n            ResponseDescription: \"Success\",\r\n            CustomerMessage: \"Success\"\r\n          });\r\n        }, 2000);\r\n      });\r\n\r\n      if (response.ResponseCode === \"0\") {\r\n        setPaymentState({\r\n          status: 'processing',\r\n          error: null,\r\n          checkoutRequestId: response.CheckoutRequestID\r\n        });\r\n        return response;\r\n      } else {\r\n        throw new Error(response.ResponseDescription);\r\n      }\r\n    } catch (error) {\r\n      setPaymentState({\r\n        status: 'error',\r\n        error: error instanceof Error ? error.message : 'Payment failed',\r\n        checkoutRequestId: null\r\n      });\r\n      throw error;\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  }, []);\r\n\r\n  const verifyPayment = useCallback(async (checkoutRequestId: string): Promise<boolean> => {\r\n    try {\r\n      // Mock verification - replace with actual API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      setPaymentState({\r\n        status: 'success',\r\n        error: null,\r\n        checkoutRequestId\r\n      });\r\n      return true;\r\n    } catch (error) {\r\n      setPaymentState({\r\n        status: 'error',\r\n        error: 'Payment verification failed',\r\n        checkoutRequestId\r\n      });\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  const resetPayment = useCallback(() => {\r\n    setPaymentState(initialPaymentState);\r\n    setIsProcessing(false);\r\n  }, []);\r\n\r\n  return (\r\n    <PaymentContext.Provider value={{\r\n      initiatePayment,\r\n      verifyPayment,\r\n      isProcessing,\r\n      error: paymentState.error,\r\n      paymentState,\r\n      resetPayment\r\n    }}>\r\n      {children}\r\n    </PaymentContext.Provider>\r\n  );\r\n};\r\n\r\nexport default PaymentContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}