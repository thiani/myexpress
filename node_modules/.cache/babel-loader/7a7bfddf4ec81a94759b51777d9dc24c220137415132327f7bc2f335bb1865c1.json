{"ast":null,"code":"// src/context/AuthContext.tsx\nimport React,{createContext,useState,useCallback}from'react';import{useNavigate}from'react-router-dom';import{jsx as _jsx}from\"react/jsx-runtime\";export const AuthContext=/*#__PURE__*/createContext(undefined);export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[error,setError]=useState(null);const navigate=useNavigate();const login=useCallback(async(email,password)=>{try{setError(null);// Mock API call - replace with actual API endpoint\nconst response=await new Promise((resolve,reject)=>{setTimeout(()=>{if(email==='admin@example.com'&&password==='password'){resolve({id:'1',email:'admin@example.com',name:'Admin User',role:'admin',avatar:'/api/placeholder/32/32'});}else{reject(new Error('Invalid credentials'));}},1000);});setUser(response);// Store auth token in localStorage\nlocalStorage.setItem('authToken','mock-jwt-token');}catch(err){setError(err instanceof Error?err.message:'Login failed');throw err;}},[]);const logout=useCallback(()=>{setUser(null);localStorage.removeItem('authToken');navigate('/auth/login');},[navigate]);return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,isAuthenticated:!!user,login,logout,error},children:children});};","map":{"version":3,"names":["React","createContext","useState","useCallback","useNavigate","jsx","_jsx","AuthContext","undefined","AuthProvider","_ref","children","user","setUser","error","setError","navigate","login","email","password","response","Promise","resolve","reject","setTimeout","id","name","role","avatar","Error","localStorage","setItem","err","message","logout","removeItem","Provider","value","isAuthenticated"],"sources":["C:/Users/Thiani/myexpress/myexpresslimited/src/context/AuthContext.tsx"],"sourcesContent":["// src/context/AuthContext.tsx\r\nimport React, { createContext, useState, useCallback } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\ninterface User {\r\n  id: string;\r\n  email: string;\r\n  name: string;\r\n  role: 'admin' | 'manager';\r\n  avatar?: string;\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  isAuthenticated: boolean;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  logout: () => void;\r\n  error: string | null;\r\n}\r\n\r\nexport const AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const navigate = useNavigate();\r\n\r\n  const login = useCallback(async (email: string, password: string) => {\r\n    try {\r\n      setError(null);\r\n      // Mock API call - replace with actual API endpoint\r\n      const response = await new Promise<User>((resolve, reject) => {\r\n        setTimeout(() => {\r\n          if (email === 'admin@example.com' && password === 'password') {\r\n            resolve({\r\n              id: '1',\r\n              email: 'admin@example.com',\r\n              name: 'Admin User',\r\n              role: 'admin',\r\n              avatar: '/api/placeholder/32/32'\r\n            });\r\n          } else {\r\n            reject(new Error('Invalid credentials'));\r\n          }\r\n        }, 1000);\r\n      });\r\n\r\n      setUser(response);\r\n      // Store auth token in localStorage\r\n      localStorage.setItem('authToken', 'mock-jwt-token');\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Login failed');\r\n      throw err;\r\n    }\r\n  }, []);\r\n\r\n  const logout = useCallback(() => {\r\n    setUser(null);\r\n    localStorage.removeItem('authToken');\r\n    navigate('/auth/login');\r\n  }, [navigate]);\r\n\r\n  return (\r\n    <AuthContext.Provider value={{\r\n      user,\r\n      isAuthenticated: !!user,\r\n      login,\r\n      logout,\r\n      error\r\n    }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,WAAW,KAAQ,OAAO,CACnE,OAASC,WAAW,KAAQ,kBAAkB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAkB/C,MAAO,MAAM,CAAAC,WAAW,cAAGN,aAAa,CAA8BO,SAAS,CAAC,CAEhF,MAAO,MAAM,CAAAC,YAAqD,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAChF,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGX,QAAQ,CAAc,IAAI,CAAC,CACnD,KAAM,CAACY,KAAK,CAAEC,QAAQ,CAAC,CAAGb,QAAQ,CAAgB,IAAI,CAAC,CACvD,KAAM,CAAAc,QAAQ,CAAGZ,WAAW,CAAC,CAAC,CAE9B,KAAM,CAAAa,KAAK,CAAGd,WAAW,CAAC,MAAOe,KAAa,CAAEC,QAAgB,GAAK,CACnE,GAAI,CACFJ,QAAQ,CAAC,IAAI,CAAC,CACd;AACA,KAAM,CAAAK,QAAQ,CAAG,KAAM,IAAI,CAAAC,OAAO,CAAO,CAACC,OAAO,CAAEC,MAAM,GAAK,CAC5DC,UAAU,CAAC,IAAM,CACf,GAAIN,KAAK,GAAK,mBAAmB,EAAIC,QAAQ,GAAK,UAAU,CAAE,CAC5DG,OAAO,CAAC,CACNG,EAAE,CAAE,GAAG,CACPP,KAAK,CAAE,mBAAmB,CAC1BQ,IAAI,CAAE,YAAY,CAClBC,IAAI,CAAE,OAAO,CACbC,MAAM,CAAE,wBACV,CAAC,CAAC,CACJ,CAAC,IAAM,CACLL,MAAM,CAAC,GAAI,CAAAM,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAC1C,CACF,CAAC,CAAE,IAAI,CAAC,CACV,CAAC,CAAC,CAEFhB,OAAO,CAACO,QAAQ,CAAC,CACjB;AACAU,YAAY,CAACC,OAAO,CAAC,WAAW,CAAE,gBAAgB,CAAC,CACrD,CAAE,MAAOC,GAAG,CAAE,CACZjB,QAAQ,CAACiB,GAAG,WAAY,CAAAH,KAAK,CAAGG,GAAG,CAACC,OAAO,CAAG,cAAc,CAAC,CAC7D,KAAM,CAAAD,GAAG,CACX,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAE,MAAM,CAAG/B,WAAW,CAAC,IAAM,CAC/BU,OAAO,CAAC,IAAI,CAAC,CACbiB,YAAY,CAACK,UAAU,CAAC,WAAW,CAAC,CACpCnB,QAAQ,CAAC,aAAa,CAAC,CACzB,CAAC,CAAE,CAACA,QAAQ,CAAC,CAAC,CAEd,mBACEV,IAAA,CAACC,WAAW,CAAC6B,QAAQ,EAACC,KAAK,CAAE,CAC3BzB,IAAI,CACJ0B,eAAe,CAAE,CAAC,CAAC1B,IAAI,CACvBK,KAAK,CACLiB,MAAM,CACNpB,KACF,CAAE,CAAAH,QAAA,CACCA,QAAQ,CACW,CAAC,CAE3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}